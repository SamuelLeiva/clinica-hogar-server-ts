//usando cookies
//refresh token
// const refresh = async (req: Request, res: Response) => {
//   const cookies = req.cookies;

//   if (!cookies?.jwt) return res.status(401).json({ message: "Unauthorized" });
//   const refreshToken = cookies.jwt;

//   const foundUser = await findUser({ refreshToken });

//   if (!foundUser) return res.status(403).json({ message: "Forbidden" }); //Forbidden

//   // evaluate refresh jwt
//   let decoded: any;

//   decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_TOKEN_SECRET!);

//   if (foundUser._id.toString() !== decoded._id)
//     return res.status(403).json({ message: "Unauthorized" }); //Unauthorized

//   const accessToken = await generateToken(foundUser, "access");

//   res.json({ foundUser, accessToken });
// };

// //TODO: verificar que funcione el logout desde postman. Configurar cookies en postman
// const logoutController = async (req: Request, res: Response) => {
//   // On client, also delete the accessToken
//   const cookies = req.cookies;

//   console.log("cookies", cookies);

//   if (!cookies?.jwt) return res.status(204).json({ message: "No content" }); //No content
//   const refreshToken = cookies.jwt;

//   // Is refreshToken in db?
//   const foundUser = await findUser({ refreshToken });

//   if (!foundUser) {
//     res.clearCookie("jwt", { httpOnly: true, sameSite: "none", secure: true });
//     return res.status(204).json({ message: "No content" });
//   }

//   // Delete refreshToken in db
//   await updateUser(foundUser._id, { refreshToken: "" });
//   res.clearCookie("jwt", { httpOnly: true, sameSite: "none", secure: true });
//   res.status(204).json({ message: "Logged out" });
// };

//login
// Creates Secure Cookie with refresh token
      // res.cookie("jwt", refreshToken, {
      //   httpOnly: true,
      //   secure: true,
      //   sameSite: "none",
      //   maxAge: 24 * 60 * 60 * 1000,
      // });